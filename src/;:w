#include "headers/gameObject2DCollisionBox.hpp"

namespace dojo {

GameObject2DCollisionBox::GameObject2DCollisionBox(GameObject *obj, float relativeOffsetX, float relativeOffsetY, float relativeScaleX, float relativeScaleY) {
    objPos = &(obj->pos);
    objScale = &(obj->scale);

    relativeOffsetx = relativeOffsetX;
    relativeOffsety = relativeOffsetY;
    relativeScalex = relativeScaleX;
    relativeScaley = relativeScaleY;

    owner = obj;
}

GameObject2DCollisionBox::~GameObject2DCollisionBox() {
    
}

bool GameObject2DCollisionBox::checkCollision(GameObject2DCollisionBox *box) {

    float boxX, boxY, boxW, boxH;
    boxX = box->objPos->x + (box->objScale->x * box->relativeOffsetx);
    boxW = boxX + (box->objScale->x * box->relativeScalex);
    boxY = box->objPos->y + (box->objScale->y * box->relativeOffsety);
    boxH = boxY + (box->objScale->y * box->relativeScaley);

    float thisX, thisY, thisW, thisH;
    thisX = this->objPos->x + (this->objScale->x * this->relativeOffsetx);
    thisW = thisX + (this->objScale->x * this->relativeScalex);
    thisY = this->objPos->y + (this->objScale->y * this->relativeOffsety);
    thisH = thisY + (this->objScale->y * this->relativeScaley);

    if (boxX < thisX + thisW &&
    boxX + boxW > thisX &&
    boxY < thisY + thisH &&
    boxH + boxY > thisY) {
        return true;
    }
    return false;
}

bool GameObject2DCollisionBox::checkCollisionWithOffset(GameObject2DCollisionBox* box, float offsetx, float offsety) {

    float boxX, boxY, boxW, boxH;
    boxX = box->objPos->x + (box->objScale->x * box->relativeOffsetx);
    boxW = boxX + (box->objScale->x * box->relativeScalex);
    boxY = box->objPos->y + (box->objScale->y * box->relativeOffsety);
    boxH = boxY + (box->objScale->y * box->relativeScaley);

    float thisX, thisY, thisW, thisH;
    thisX = this->objPos->x + (this->objScale->x * this->relativeOffsetx) + offsetx;
    thisW = thisX + (this->objScale->x * this->relativeScalex) + offsetx;
    thisY = this->objPos->y + (this->objScale->y * this->relativeOffsety) + offsety;
    thisH = thisY + (this->objScale->y * this->relativeScaley) + offsety;

    if (boxX < thisX + thisW &&
    boxX + boxW > thisX &&
    boxY < thisY + thisH &&
    boxH + boxY > thisY) {
        return true;
    }
    return false;
}

}
